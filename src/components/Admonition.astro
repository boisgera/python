---
import { Icon } from "astro-icon";

interface Props {
  type?: "note" | "solution" | "warning" | "definition" | "task";
  title?: string;
  open?: boolean;
  lock?: boolean;
}

let {
  type = "note",
  title = undefined,
  open = true,
  lock = false,
} = Astro.props;

function capitalize(word: string) {
  return word.charAt(0).toUpperCase() + word.slice(1);
}

const styles = {
  note: {
    icon: "pencil",
    light: "#e0f2fe",
    dark: "#164e63",
    local: false,
  },
  warning: {
    icon: "alert-triangle",
    light: "#ffedd5",
    dark: "#ea580c",
    local: false,
  },
  question: {
    icon: "help-circle",
    light: "#c7d2fe",
    dark: "#4f46e5",
    local: true,
  },
  solution: {
    icon: "bulb",
    light: "#fbcfe8",
    dark: "#db2777",
    local: false,
  },
  definition: {
    icon: "tag",
    light: "#ccfbf1",
    dark: "#0d9488",
    local: false,
  },
  task: {
    icon: "checklist",
    light: "#cbd5e1",
    dark: "#334155",
    local: true,
  },
};

let { icon, light, dark, local } = styles[type];
title = title ? title : capitalize(type);
icon = local ? icon : `tabler:${icon}`;
---

<aside>
  <details open={open} class={lock ? "lock" : ""}>
    <summary
      style="display:flex;align-items:center;justify-content:space-between;"
    >
      <span style="display:flex;gap:0.5em;align-items:center;">
        <span class="circle">
          <Icon name={icon} />
        </span>
        <span style="font-weight:500;">{title}</span>
      </span>
      <span class="minmax">
        <Icon class="closed" name="tabler:arrows-maximize" />
        <Icon class="open" name="tabler:arrows-minimize" />
      </span>
    </summary>
    <div class="content">
      <div style="margin: 1rem;">
        <slot />
      </div>
    </div>
  </details>
</aside>
<script>
  if (document.startViewTransition) {
    const details = document.querySelectorAll("details");
    details.forEach((detail) => {
      detail.addEventListener("click", (event) => {
        event.preventDefault();
        document.startViewTransition(() => detail.toggleAttribute("open"))
      });
    });
  }
</script>
<style is:global>
  /* ::view-transition-old(root),
  ::view-transition-new(root) {
    animation-duration: 2s;
  } */
</style>
<style define:vars={{ light, dark }}>
  aside {
    border: 0.125rem solid var(--dark); /* sky-700 */
    border-radius: 0.25rem;
    margin-bottom: 1rem;
  }
  summary {
    padding: 1rem;
    border-top-left-radius: 0.25rem;
    border-top-right-radius: 0.25rem;
    background-color: var(--light); /* sky-100 */
  }
  details > summary {
    list-style: none;
    border-radius: 0.25rem;
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
  }

  .minmax {
    color: var(--dark);
  }

  details.lock {
    pointer-events: none;
  }
  details.lock .minmax {
    display: none;
  }
  details[open] .open {
    display: inline;
  }
  details[open] .closed {
    display: none;
  }

  details:not([open]) .open {
    display: none;
  }
  details:not([open]) .closed {
    display: inline;
  }

  .content {
    border-bottom-right-radius: 0.25rem;
    border-bottom-left-radius: 0.25rem;
  }
  svg {
    height: 1rem;
  }
  .circle {
    height: 1.25rem;
    width: 1.25rem;
    border-radius: 0.25rem;
    background-color: var(--dark); /* sky-700 */
    color: white;
    display: flex;
    justify-content: center;
    align-items: center;
  }
</style>
